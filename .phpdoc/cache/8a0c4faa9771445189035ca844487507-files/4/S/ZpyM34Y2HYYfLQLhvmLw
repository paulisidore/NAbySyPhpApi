1752635044
8a0c4faa9771445189035ca844487507-phpdoc%3Aa09fcc112c165d56f2bf299341e76e87-dd9bf06e5846e03249dc2a6a7f66809c
s:15444:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:39:" phpDocumentor\Reflection\Php\File name";s:21:"modulepaie_action.php";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"dd9bf06e5846e03249dc2a6a7f66809c";s:39:" phpDocumentor\Reflection\Php\File path";s:41:"src/gs/comptabilite/modulepaie_action.php";s:41:" phpDocumentor\Reflection\Php\File source";s:9637:"<?php
/**
 * Module de gestion des Modes de Paiement.
 * Cet API réside sur le serveur local NAbySy GS afin de servir de proxy entre les caisses NAbySyGS et 
 * les différentes Plate-Forme de paiement telaue NAbySy-Wave
 */

use NAbySy\GS\Comptabilite\xCompteBancaire;
use NAbySy\Lib\ModulePaie\IModulePaieManager;
use NAbySy\Lib\ModulePaie\Wave\xCheckOutParam;
use NAbySy\xErreur;
use NAbySy\xNotification;

    $Err=new xErreur ;
    $Err->TxErreur='Erreur';
    $Err->OK=0 ;
    if (!isset($action)){
        //Il n'y a pas d'action, on retourne a la page précedente
        $Err->OK=0;
        $Err->TxErreur='Action non définit !' ;
        $Err->Source= __FUNCTION__ ;
        $reponse=json_encode($Err) ;
        echo $reponse ;
        exit;	
	}

    //echo __LINE__ ;
    //var_dump($nabysy::$ListeModulePaiement);

    if (!$nabysy->ValideUser()){
        //var_dump($_REQUEST);
        exit;
    }
    //var_dump($_REQUEST);

    switch ($action){
        case "MODULEPAIE_LISTE": //Retourne la liste des Modules de paiement enregistré sur la plate-forme
            $Liste=[];
            $Ind=0;
            if (isset($_REQUEST['INCLUDE_STATIC'])){
                if ((int)$_REQUEST['INCLUDE_STATIC']){
                    //Espece
                    $Ind++;
                    //$vMd['INDEX']=$Ind;
                    $vMd['ID']=$Ind ;
                    $vMd['Nom'] = "ESPECE";
                    $vMd['Description'] = "Paiement Espèce et Cash";
                    $vMd['HandleName'] = "" ;
                    $vMd['Alias'] = "ESPECE";
                    $vMd['Logo'] = "";
                    $Liste[]=$vMd ;
                    
                }
            }
            
            $CompteB=new xCompteBancaire($nabysy);

            if (count(N::$ListeModulePaiement)>0){
                foreach(N::$ListeModulePaiement as $Mod){
                    //var_dump(get_class($Mod));
                    try{
                        if ($Mod instanceof IModulePaieManager){
                            $Index=array_search($Mod,N::$ListeModulePaiement)+1 ;
                            if ($Ind>0){
                                $Index=$Ind+1 ;
                                //$vMd['INDEX']=$Index;
                                $Ind++;
                            }
                            
                            $vMd['ID']=$Index ;
                            $vMd['Nom'] = $Mod->Nom();
                            $vMd['Description'] = $Mod->Description();
                            $vMd['HandleName'] = $Mod->HandleModuleName() ;
                            $vMd['Alias'] = $Mod->UIName();
                            $vMd['Logo'] = $Mod->LogoURL();
                            $vMd['IdCompteBancaire']=0;

                            $vMd['API_DISPONIBLE'] = $Mod->Api_Disponible() ;
                            $vMd['CLIENT_ID'] = 0; //$Mod->CLIENT_ID ;
                            $vMd['API_TOKEN'] = $Mod->Api_Token() ;
                            $vMd['API_ENDPOINT'] = $Mod->Api_EndPoint() ;
                            $vMd['API_AUTH'] = $Mod->Api_Auth() ;
                            $vMd['API_AUTH_USER'] = $Mod->Api_Auth_User() ;
                            $vMd['API_AUTH_PWD'] = $Mod->Api_Auth_Pwd() ;
                            $vMd['WAIT_API_RESPONSE'] = $Mod->Wait_Api_Response() ;
                            $vMd['API_REFCLIENT'] = $Mod->Api_RefClient() ;
                            //Ajout de l'IdCompte Bancaire correspondant
                            $CpteBanc=$CompteB->GetCompteBancaireByName($Mod->Nom());
                            if(isset($CpteBanc)){
                                if($CpteBanc->Id){
                                    $vMd['IdCompteBancaire']= $CpteBanc->Id;
                                }
                            }
                            

                            $Liste[]=$vMd ;
                        }
                    }
                    catch (Exception $ex){

                    }
                }
            }
            $Reponse=new xNotification();
            $Reponse->OK=1;
            $Reponse->Autres = "Liste des Méthodes de Paiements";
            $Reponse->Contenue = $Liste ;
            echo json_encode($Reponse) ;
        exit;

        case "MODULEPAIE_NEW_CHECKOUT":   //Retoune les infos (url) a Afficher sur le poste caisse afin d'etre validé sur le mobile du client
            $Montant=null;
            $RefPanier=null;
            $Caisse=null;
            $Caissier =null;
            $HandleModName=null;
            
            if (isset($PARAM['HANDLENAME'])){
                $HandleModName=$PARAM['HANDLENAME'] ;
            }else{
                $Err->TxErreur='Handle du module absent !' ;
                $Err->Source=$action ;
                echo json_encode($Err) ;
                exit;
            }
            if (isset($PARAM['MONTANT'])){
                $Montant=$PARAM['MONTANT'] ;
            }else{
                $Err->TxErreur='Aucun montant définit' ;
                $Err->Source=$action ;
                echo json_encode($Err) ;
                exit;
            }
            if (isset($PARAM['REFPANIER'])){
                $RefPanier=$PARAM['REFPANIER'] ;
            }else{
                $Err->TxErreur='Aucune reference de panier définit. Impossible de valider le panier.' ;
                $Err->Source=$action ;
                echo json_encode($Err) ;
                exit;
            }
            if (isset($PARAM['CAISSE'])){
                $Caisse=$PARAM['CAISSE'] ;
            }else{
                $Err->TxErreur='Aucune caisse ou poste de saisie définit. Impossible de valider le panier.' ;
                $Err->Source=$action ;
                echo json_encode($Err) ;
                exit;
            }
            if (isset($PARAM['CAISSIER'])){
                $Caissier=$PARAM['CAISSIER'] ;
            }else{
                $Err->TxErreur='Aucun CAISSIER ou poste de saisie définit. Impossible de valider le panier.' ;
                $Err->Source=$action ;
                echo json_encode($Err) ;
                exit;
            }
            
            $Module=$nabysy->GetModulePaie($HandleModName);
            
            if (!isset($Module)){
                $Err->TxErreur='Le Module avec le Handle '.$HandleModName." est absent ou indisponible pour le moment." ;
                $Err->Source=$action ;
                echo json_encode($Err) ;
                exit;
            }

            $RefCheckOut['REFFACTURE']=$RefPanier ;
            $RefCheckOut['MONTANT']=$Montant ;
            $RefCheckOut['CAISSE']=$Caisse ;
            $RefCheckOut['CAISSIER']=$Caissier;

            if (isset($PARAM['IDCAISSE'])){
                $RefCheckOut['IDCAISSE']=$PARAM['IDCAISSE'];
            }
            if (isset($PARAM['IDCAISSIER'])){
                $RefCheckOut['IDCAISSIER']=$PARAM['IDCAISSIER'];
            }
            
            $Reponse=$Module->GetCheckOut($Montant,$RefCheckOut);
            if(isset($_REQUEST['TRACKERID'])){
                $Reponse->Source = $_REQUEST['TRACKERID'];
            }
            //var_dump($Reponse);
            echo json_encode($Reponse);
            exit;

        case "MODULEPAIE_CHECK_VALIDATION":   //Demande l'etat de validation d'une facture

            $Reponse=new xErreur;
            $Reponse->OK=1;
            $Reponse->Extra=1 ; //Ref du paiement effectuer

            $IdDemande =null;
            if (isset($PARAM['IDDEMANDE'])){
                $IdDemande=$PARAM['IDDEMANDE'];
            }
            $Etat=new xNotification ;
            $Etat->OK=0;
            if (!isset($CheckOutInfo['IDDEMANDE'])){            
                $Etat->TxErreur="Id de la demande absent !";
                echo json_encode($Etat) ;
                exit;
            }

            $HandleModName=null;
            if (isset($PARAM['HANDLENAME'])){
                $HandleModName=$PARAM['HANDLENAME'] ;
            }else{
                $Err->TxErreur='Handle du module absent !' ;
                $Err->Source=$action ;
                echo json_encode($Err) ;
                exit;
            }
            $Module=$nabysy->GetModulePaie($HandleModName);
            if (!isset($Module)){
                $Err->TxErreur='Le Module avec le Handle '.$HandleModName." est absent ou indisponible pour le moment." ;
                $Err->Source=$action ;
                echo json_encode($Err) ;
                exit;
            }

            $IdDemande=$CheckOutInfo['IDDEMANDE'];
            $Demande=new  xCheckOutParam($this->Main,$IdDemande);
            $Reponse=$Module->GetEtatCheckOut($Demande);
            if(isset($_REQUEST['TRACKERID'])){
                $Reponse->Source = $_REQUEST['TRACKERID'];
            }
            echo json_encode($Reponse);
            exit;
        case "MODULEPAIE_CANCEL_CHECKOUT":  //Annule une demande de paiement

            exit;
        case "MODULEPAIE_REFUND":   //Effectue un remboursement sur un paiement selon le ou les modes de règlements trouvés

            exit;

        case "MODEPAIE_GET_RAPPORT":    //Retourne l'historique des paiements selon la période et autres critere
            $DateDebut=date("Y-m-d");
            $DateFin=$DateDebut ;
            $NomMethode =null;

        default:
            break;

    }

?>";s:43:" phpDocumentor\Reflection\Php\File docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:40:"Module de gestion des Modes de Paiement.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:160:"Cet API réside sur le serveur local NAbySy GS afin de servir de proxy entre les caisses NAbySyGS et
les différentes Plate-Forme de paiement telaue NAbySy-Wave";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";